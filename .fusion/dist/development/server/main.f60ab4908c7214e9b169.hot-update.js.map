{"version":3,"file":"main.f60ab4908c7214e9b169.hot-update.js","sources":["/Users/jamie/GitHub/image-gallery/src/server/routes.js"],"sourcesContent":["const AlbumModel = require(\"./AlbumModel\");\nimport { createPlugin } from \"fusion-core\";\nimport bodyParser from \"koa-bodyparser\";\n\nexport default __NODE__ &&\n  createPlugin({\n    middleware() {\n      const parseBody = bodyParser();\n      return async (ctx, next) => {\n        // get all albums\n        if (ctx.method === \"GET\" && ctx.path === \"/api/getAlbums\") {\n          const albums = await AlbumModel.find({});\n          ctx.body = { message: \"status ok\", albums };\n          // find album by id\n        } else if (\n          ctx.method === \"GET\" &&\n          ctx.path.startsWith(\"/api/findAlbum/\")\n        ) {\n          const albumId = ctx.path.match(/findAlbum\\/(.*)/)[1];\n          const album = await AlbumModel.findOne({ _id: albumId });\n          ctx.body = { message: \"status ok\", album };\n          // create album\n        } else if (ctx.method === \"POST\" && ctx.path === \"/api/create-album\") {\n          await parseBody(ctx, () => Promise.resolve());\n          let { albumName } = ctx.request.body;\n          const newAlbum = new AlbumModel({ name: albumName });\n          const result = await newAlbum.save();\n          ctx.body = { message: \"status ok\", albumId: result._id };\n          // add images\n        } else if (\n          ctx.method === \"PUT\" &&\n          ctx.path.startsWith(\"/api/add-image\")\n        ) {\n          const albumId = ctx.path.match(/add-image\\/(.*)/)[1];\n          await parseBody(ctx, () => Promise.resolve());\n          let { image } = ctx.request.body;\n          const album = await AlbumModel.findOne({ _id: albumId });\n          let currentAlbum = album.images;\n          currentAlbum.push(image);\n          const result = await AlbumModel.findOneAndUpdate(\n            { _id: albumId },\n            {\n              $set: { images: currentAlbum }\n            },\n            { new: true }\n          );\n          ctx.body = { message: \"status ok\", result };\n        } else if (ctx.method === \"POST\" && ctx.path === \"/api/delete-image\") {\n          await parseBody(ctx, () => Promise.resolve());\n          let { imageToDelete, albumId } = ctx.request.body;\n          const album = await AlbumModel.findOne({ _id: albumId });\n\n          const imagesArray = album.images;\n          console.log(\"typeof imageToDelete\", typeof imageToDelete);\n\n          for (let i = 0; i < imagesArray.length; i++) {\n            console.log(\"imagesArray[i]._id\", imagesArray[i]._id);\n            console.log(\"tyepof imagesArray[i]._id\", typeof imagesArray[i]._id);\n\n            if (imagesArray[i]._id === imageToDelete) {\n              console.log(\"imagesArray[i]._id\", imagesArray[i]._id);\n            }\n          }\n\n          // const result = await AlbumModel.findOneAndUpdate(\n          //   { _id: albumId },\n          //   {\n          //     $set: { images: currentAlbum }\n          //   },\n          //   { new: true }\n          // );\n          ctx.body = { message: \"status ok\", result };\n        }\n        return next();\n      };\n    }\n  });\n"],"mappings":";;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AAIA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AAIA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AADA;AAGA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAvEA;;;;A","sourceRoot":""}